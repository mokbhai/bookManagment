import transactionService from "../services/transactionService";
/**
 * Issues a book to a user.
 *
 * @param req - Express request object containing issue data in the body
 * @param res - Express response object used to send back the HTTP response
 * @returns A success message and the transaction details if the book is issued successfully
 * @throws Error if the book cannot be issued
 */
const issueBook = async (req, res) => {
    try {
        const issueData = req.body;
        const transaction = await transactionService.issueBook(issueData);
        res.status(201).json({
            success: true,
            message: "Book issued successfully",
            transaction,
        });
    }
    catch (error) {
        res.status(400).json({ message: error.message });
    }
};
/**
 * Returns a book from a user.
 *
 * @param req - Express request object containing return data in the body
 * @param res - Express response object used to send back the HTTP response
 * @returns A success message and the transaction details if the book is returned successfully
 * @throws Error if the book cannot be returned
 */
const returnBook = async (req, res) => {
    try {
        const returnData = req.body;
        const transaction = await transactionService.returnBook(returnData);
        res.status(200).json({
            success: true,
            message: "Book returned successfully",
            transaction,
        });
    }
    catch (error) {
        res.status(400).json({ message: error.message });
    }
};
/**
 * Retrieves the status of a book.
 *
 * @param req - Express request object containing the book name as a query parameter
 * @param res - Express response object used to send back the HTTP response
 * @returns The status of the book
 * @throws Error if the status cannot be retrieved
 */
const bookStatus = async (req, res) => {
    try {
        const bookName = req.query.bookName;
        const transactions = await transactionService.bookStatus(bookName);
        res.status(200).json({
            success: true,
            message: "Book Status: ",
            transactions,
        });
    }
    catch (error) {
        res.status(400).json({ message: error.message });
    }
};
/**
 * Calculates the revenue generated by a book.
 *
 * @param req - Express request object containing the book name as a query parameter
 * @param res - Express response object used to send back the HTTP response
 * @returns The total revenue generated by the book
 * @throws Error if the revenue cannot be calculated
 */
const bookRevenue = async (req, res) => {
    try {
        const bookName = req.query.bookName;
        const amount = await transactionService.bookRevenue(bookName);
        res.status(200).json({
            success: true,
            message: bookName + " Book Revenue: ",
            amount,
        });
    }
    catch (error) {
        res.status(400).json({ message: error.message });
    }
};
/**
 * Retrieves the list of books issued to a user.
 *
 * @param req - Express request object containing the user ID or name as a query parameter
 * @param res - Express response object used to send back the HTTP response
 * @returns A list of books issued to the user
 * @throws Error if the books cannot be retrieved
 */
export const getBooksByUser = async (req, res) => {
    try {
        const { userIdOrName } = req.query;
        if (!userIdOrName) {
            res.status(400).json({ message: "User ID or name is required" });
            return;
        }
        const books = await transactionService.getBooksIssuedToUser(userIdOrName);
        res.status(200).json(books);
    }
    catch (error) {
        res.status(500).json({ message: error.message });
    }
};
/**
 * Retrieves the list of books issued within a specified date range.
 *
 * @param req - Express request object containing start and end dates as query parameters
 * @param res - Express response object used to send back the HTTP response
 * @returns A list of books issued within the date range
 * @throws Error if the books cannot be retrieved
 */
export const getBooksByDateRange = async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        if (!startDate || !endDate) {
            res.status(400).json({ message: "Start date and end date are required" });
            return;
        }
        const books = await transactionService.getBooksIssuedInDateRange(new Date(startDate), new Date(endDate));
        res.status(200).json(books);
    }
    catch (error) {
        res.status(500).json({ message: error.message });
    }
};
/**
 * Creates dummy transactions for testing purposes.
 *
 * @param req - Express request object
 * @param res - Express response object used to send back the HTTP response
 * @returns A list of created dummy transactions
 * @throws Error if the transactions cannot be created
 */
const createDummyTransations = async (req, res) => {
    try {
        const transactions = await transactionService.createDummyTransations();
        res.status(201).json(transactions);
    }
    catch (error) {
        res.status(400).json({ message: error.message });
    }
};
// Export the controller functions for use in routes
export default {
    issueBook,
    returnBook,
    createDummyTransations,
    bookStatus,
    bookRevenue,
    getBooksByDateRange,
    getBooksByUser,
};
